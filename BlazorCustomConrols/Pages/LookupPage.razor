@page "/lookup"

<h1>Lookup Control Demo</h1>
<Toggle @bind-IsOn="IsReadOnlyMode" />
<p>Mode: @(IsReadOnlyMode ? "Read Only" : "Editable")</p>
<label>Lookup</label>
<Lookup T="Job"
    Watermark="Lookup a Job..."
    Items="@Jobs"
    @bind-SelectedItem="SelectedJob"
    AddEntityCommand="AddJobCommand"
    IsReadOnly="IsReadOnlyMode"
    ViewEntityCommand="ViewJobCommand">
</Lookup>
<hr />
<label>Lookup (with enabling IsInListMode)</label>
<Lookup T="Job"
        Watermark="Lookup a Job..."
        Items="@Jobs"
        IsInListMode="true"
        @bind-SelectedItem="SelectedJobForInListMode"
        AddEntityCommand="AddJobCommand"
        IsReadOnly="IsReadOnlyMode"
        CheckEntityCommand="ViewJobCommand">
</Lookup>

@code {
    private bool IsReadOnlyMode;
    private List<Job> Jobs { get; set; } = new();
    private Job? SelectedJob { get; set; }
    private Job? SelectedJobForInListMode { get; set; }

    private ICommand AddJobCommand => new ActionCommand(() =>
    {
        Console.WriteLine("Add Job Command Executed");
    });

    private ICommand ViewJobCommand => new ActionCommand(() =>
    {
        Console.WriteLine($"View Job Command Executed for {SelectedJob?.Name}");
    });
    private ICommand CheckJobCommand => new ActionCommand(() =>
    {
        Console.WriteLine($"Check Job Command Executed for {SelectedJobForInListMode?.Name}");
    });

    protected override void OnInitialized()
    {
        // Generate 100 fake jobs using Bogus
        var faker = new Bogus.Faker<Job>()
            .RuleFor(j => j.BarID, f => (ulong)f.Random.ULong(100000, 999999)) // Generate a random ulong
            .RuleFor(j => j.Title, f => f.Name.JobTitle())
            .RuleFor(j => j.Name, f => f.Company.CompanyName());

        Jobs = faker.Generate(100);
    }
}
