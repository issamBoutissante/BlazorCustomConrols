@typeparam TEnum
<div class="@(Class) form-group" style="@(IsVisible ? "" : "display: none;")">
    <label>@Label</label>
    @if (IsReadOnly)
    {
        <select class="form-control" disabled>
            @if (SelectedValue == null)
            {
                <option value="" selected disabled>Select an option</option>
            }
            @foreach (var item in EnumValues)
            {
                <option value="@item" selected="@((item.Equals(SelectedValue)) ? "selected" : null)">@item</option>
            }
        </select>
    }
    else
    {
        <select class="form-control" @onchange="OnSelectedValueChanged">
            @if (SelectedValue == null)
            {
                <option value="" selected disabled>Select an option</option>
            }
            @foreach (var item in EnumValues)
            {
                <option value="@item" selected="@((item.Equals(SelectedValue)) ? "selected" : null)">@item</option>
            }
        </select>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public TEnum? SelectedValue { get; set; }
    [Parameter] public EventCallback<TEnum?> SelectedValueChanged { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = true;
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public string Class { get; set; } = string.Empty;

    private IEnumerable<TEnum> EnumValues => Enum.GetValues(typeof(TEnum)).Cast<TEnum>();

    private async Task OnSelectedValueChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse(typeof(TEnum), e.Value?.ToString(), out var parsedValue))
        {
            var newValue = (TEnum?)parsedValue;
            if (!EqualityComparer<TEnum?>.Default.Equals(SelectedValue, newValue))
            {
                SelectedValue = newValue;
                await SelectedValueChanged.InvokeAsync(newValue);
            }
        }
    }
}
