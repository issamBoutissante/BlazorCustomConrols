@typeparam T where T : IBaseEntity

<style>
    .lookup-container {
        position: relative;
        margin-bottom: 1rem;
    }

        .lookup-container.disabled {
            opacity: 0.6;
            pointer-events: none;
        }

    .lookup-input-group {
        display: flex;
        align-items: center;
        position: relative;
    }

    .lookup-icon {
        padding: 0.5rem;
        cursor: pointer;
        color: #007bff;
    }

    .lookup-suggestions {
        list-style: none;
        padding: 0;
        margin: 0;
        border: 1px solid #ddd;
        border-radius: 0.25rem;
        background: #fff;
        position: absolute;
        width: 100%;
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
    }

        .lookup-suggestions li {
            padding: 0.5rem;
            cursor: pointer;
        }

            .lookup-suggestions li:hover,
            .lookup-suggestions li.active {
                background: #f1f1f1;
            }

    .help-icon {
        margin-left: 0.5rem;
        font-size: 0.9rem;
        cursor: pointer;
        color: gray;
        position: relative;
    }

    .lookup-tooltip {
        display: none;
        position: absolute;
        top: -40px;
        right: 0;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 0.25rem;
        padding: 0.5rem;
        font-size: 0.85rem;
        color: #333;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        width: 200px;
    }

    .help-icon:hover .lookup-tooltip {
        display: block;
    }
</style>

<div class="lookup-container @(Class) @(IsReadOnly ? "disabled" : "")" style="@(IsVisible ? "" : "display: none;")">
    <div class="lookup-input-group">
        <!-- Left Icon -->
        <span class="lookup-icon">
            @if (IsInListMode && SelectedItem != null)
            {
                <span key="check" @onclick="OnCheckIconClick"><i class="fas fa-check"></i></span> <!-- Checkmark icon -->
            }
            else if (!string.IsNullOrWhiteSpace(searchText) && SelectedItem == null && (FilteredItems == null || !FilteredItems.Any()))
            {
                <span key="warning"><i class="fas fa-exclamation-triangle"></i></span> <!-- Warning icon -->
            }
            else
            {
                <span key="search"><i class="fas fa-search"></i></span> <!-- Default search icon -->
            }
        </span>

        <!-- Input Box -->
        <input type="text"
        class="form-control"
        placeholder="@Watermark"
        value="@searchText"
        @oninput="SearchTextChanged"
        @onfocus="ShowSuggestions"
        @onblur="HideSuggestionsWithDelay"
        readonly="@IsReadOnly" />

        <!-- Help Icon -->
        <div class="help-icon">
            <i class="fas fa-info-circle"></i>
            <div class="lookup-tooltip">
                <p><strong>Search Tips:</strong></p>
                <ul>
                    <li><strong>Default:</strong> Search by <em>Name</em>.</li>
                    <li><strong>?</strong>: Show all items by <em>Name</em> and set search to <em>Name</em>.</li>
                    <li><strong>*</strong>: Show all items by <em>Title</em> and set search to <em>Title</em>.</li>
                    <li><strong>#</strong>: Show all items by <em>BarID</em> and set search to <em>BarID</em>.</li>
                </ul>
            </div>
        </div>

        <!-- Right Icon -->
        <span class="lookup-icon">
            @if (!IsInListMode && SelectedItem != null)
            {
                <span key="view" @onclick="OnViewIconClick"><i class="fas fa-eye"></i></span> <!-- View icon -->
            }
            else
            {
                <span key="add" @onclick="OnAddIconClick"><i class="fas fa-plus"></i></span> <!-- Add icon -->
            }
        </span>
    </div>

    <!-- Suggestions Dropdown -->
    @if (!IsReadOnly && SelectedItem == null && IsSuggestionsVisible && FilteredItems?.Any() == true)
    {
        <ul class="lookup-suggestions"
        @onmouseover="(() => preventBlur = true)"
        @onmouseout="(() => preventBlur = false)">
            <Virtualize TItem="T" Items="FilteredItems" Context="item">
                <li @onclick="(() => SelectItem(item))">
                    <span>@item[DisplayPath.ToString()]</span>
                </li>
            </Virtualize>
        </ul>
    }
</div>

@code {
    [Parameter] public bool IsInListMode { get; set; } = false; // Toggle between Lookup and LookupInList
    [Parameter] public string Watermark { get; set; } = "Search...";
    [Parameter] public List<T>? Items { get; set; }
    [Parameter] public T? SelectedItem { get; set; }
    [Parameter] public EventCallback<T?> SelectedItemChanged { get; set; }
    [Parameter] public ICommand? AddEntityCommand { get; set; }
    [Parameter] public ICommand? ViewEntityCommand { get; set; }
    [Parameter] public ICommand? CheckEntityCommand { get; set; } // For InListMode
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public LookupDispayPath DisplayPath { get; set; } = LookupDispayPath.Name;
    private string searchText { get; set; } = string.Empty;
    private ICollection<T>? FilteredItems { get; set; }

    private bool IsSuggestionsVisible { get; set; } = false;
    private bool preventBlur { get; set; } = false;

    private void ShowSuggestions()
    {
        if (!IsReadOnly)
        {
            FilterSuggestions();
        }
    }

    private async Task HideSuggestionsWithDelay()
    {
        if (preventBlur) return;
        await Task.Delay(200);
        IsSuggestionsVisible = false;
    }

    private void FilterSuggestions()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FilteredItems = [];
            return;
        }
        else if (searchText.Trim() == "?")
        {
            DisplayPath = LookupDispayPath.Name;
            FilteredItems = Items;
        }
        else if (searchText.Trim() == "*")
        {
            DisplayPath = LookupDispayPath.Title;
            FilteredItems = Items;
        }
        else if (searchText.Trim() == "#")
        {
            DisplayPath = LookupDispayPath.BarID;
            FilteredItems = Items;
        }
        else
        {
            FilteredItems = Items?
                .Where(item => item[DisplayPath.ToString()]?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true)
                .ToList();
        }
        IsSuggestionsVisible = FilteredItems?.Any() == true;
    }

    private void SelectItem(T item)
    {
        SelectedItem = item;
        searchText = @item[DisplayPath.ToString()] ?? string.Empty;
        IsSuggestionsVisible = false;
        SelectedItemChanged.InvokeAsync(SelectedItem);
    }

    private void SearchTextChanged(ChangeEventArgs e)
    {
        SelectedItem = default(T);
        if (e.Value is string newValue)
        {
            searchText = newValue;
            FilterSuggestions();
        }
    }

    private void OnCheckIconClick()
    {
        CheckEntityCommand?.Execute(SelectedItem);
    }

    private void OnViewIconClick()
    {
        ViewEntityCommand?.Execute(SelectedItem);
    }

    private void OnAddIconClick()
    {
        AddEntityCommand?.Execute(null);
    }

    public enum LookupDispayPath
    {
        BarID,
        Title,
        Name
    }
}
