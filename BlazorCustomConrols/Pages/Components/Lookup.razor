@typeparam T

<style>
    .lookup-container {
        position: relative;
        margin-bottom: 1rem;
    }

    .lookup-input-group {
        display: flex;
        align-items: center;
    }

    .lookup-icon {
        padding: 0.5rem;
        cursor: pointer;
        color: #007bff;
    }

    .lookup-suggestions {
        list-style: none;
        padding: 0;
        margin: 0;
        border: 1px solid #ddd;
        border-radius: 0.25rem;
        background: #fff;
        position: absolute;
        width: 100%;
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
    }

    .lookup-suggestions li {
        padding: 0.5rem;
        cursor: pointer;
    }

    .lookup-suggestions li:hover,
    .lookup-suggestions li.active {
        background: #f1f1f1;
    }
</style>

<div class="lookup-container @(Class)" style="@(IsVisible ? "" : "display: none;")">
    <div class="lookup-input-group">
        <!-- Left Icon -->
        <span class="lookup-icon">
            @if (!string.IsNullOrWhiteSpace(searchText) && SelectedItem == null && (FilteredItems == null || !FilteredItems.Any()))
            {
                <span key="warning"><i class="fas fa-exclamation-triangle"></i></span> <!-- Warning icon -->
            }
            else if (SelectedItem != null)
            {
                <span key="check"><i class="fas fa-check"></i></span> <!-- Checkmark icon -->
            }
            else
            {
                <span key="search"><i class="fas fa-search"></i></span> <!-- Default search icon -->
            }
        </span>
        <!-- Input Box -->
        <input type="text"
        class="form-control"
        placeholder="@Watermark"
        value="@searchText"
        @oninput="SearchTextChanged"
        @onfocus="ShowSuggestions"
        @onblur="HideSuggestionsWithDelay"/>

        <!-- Right Icon -->
        <span class="lookup-icon">
            @if (SelectedItem != null)
            {
                <span key="view" @onclick="OnViewIconClick"><i class="fas fa-eye"></i></span> <!-- View icon -->
            }
            else
            {
                <span key="add" @onclick="OnAddIconClick"><i class="fas fa-plus"></i></span> <!-- Add icon -->
            }
        </span>
    </div>

    <!-- Suggestions Dropdown -->
    @if (!IsReadOnly && SelectedItem == null && IsSuggestionsVisible && FilteredItems?.Any() == true)
    {
        <ul class="lookup-suggestions"
            @onmouseover="(() => preventBlur = true)"
            @onmouseout="(() => preventBlur = false)">
            <Virtualize TItem="T" Items="FilteredItems" Context="item">
                <li @onclick="(() => SelectItem(item))">
                    @RenderItemTemplate(item)
                </li>
            </Virtualize>
        </ul>
    }
</div>

@code {
    [Parameter] public string Watermark { get; set; } = "Search...";
    [Parameter] public List<T>? Items { get; set; }
    [Parameter] public T? SelectedItem { get; set; }
    [Parameter] public EventCallback<T?> SelectedItemChanged { get; set; }
    [Parameter] public ICommand? AddEntityCommand { get; set; }
    [Parameter] public ICommand? ViewEntityCommand { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public RenderFragment<T>? ItemTemplate { get; set; }
    private string searchText { get; set; } = string.Empty;
    private ICollection<T>? FilteredItems { get; set; }

    private bool IsSuggestionsVisible { get; set; } = false;
    private bool preventBlur { get; set; } = false;

    private void ShowSuggestions()
    {
        if (!IsReadOnly)
        {
            FilterSuggestions();
        }
    }
    private async ValueTask<ItemsProviderResult<(T value, int index)>> GetVirtualizedItems(ItemsProviderRequest request)
    {
        if (FilteredItems == null)
        {
            return new ItemsProviderResult<(T value, int index)>(Array.Empty<(T, int)>(), 0);
        }

        // Slice the FilteredItems based on the requested range
        var items = FilteredItems
            .Select((value, index) => (value, index))
            .Skip(request.StartIndex)
            .Take(request.Count)
            .ToArray();

        return new ItemsProviderResult<(T value, int index)>(items, FilteredItems.Count());
    }


    private async Task HideSuggestionsWithDelay()
    {
        if (preventBlur) return;
        await Task.Delay(200);
        IsSuggestionsVisible = false;
    }

    private void FilterSuggestions()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FilteredItems = [];
            return;
        }
        else if (searchText.Trim() == "?")
        {
            // Show all items if '?' is entered
            FilteredItems = Items;
        }
        else
        {
            // Filter items based on the input text
            FilteredItems = Items?
     .Where(item => item != null && item.ToString()?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true)
     .ToList();
        }
        IsSuggestionsVisible = FilteredItems?.Any() == true;
    }

    private void SelectItem(T item)
    {
        if (item is null) throw new NullReferenceException("selected item is null");
        SelectedItem = item;
        searchText = item.ToString() ?? string.Empty;
        IsSuggestionsVisible = false;
        SelectedItemChanged.InvokeAsync(SelectedItem);
    }

    private void SearchTextChanged(ChangeEventArgs e)
    {
        this.SelectedItem = default(T);
        if (e.Value is string newValue)
        {
            searchText = newValue;
            FilterSuggestions();
        }
    }
    private void OnViewIconClick()
    {
        if (SelectedItem != null && ViewEntityCommand?.CanExecute(SelectedItem) == true)
        {
            ViewEntityCommand.Execute(SelectedItem);
        }
    }

    private void OnAddIconClick()
    {
        if (SelectedItem == null && AddEntityCommand?.CanExecute(null) == true)
        {
            AddEntityCommand.Execute(null);
        }
    }

    private RenderFragment RenderItemTemplate(T item)
    {
        return ItemTemplate != null ? ItemTemplate(item) : (builder =>
        {
            builder.AddContent(0, item?.ToString());
        });
    }
}
