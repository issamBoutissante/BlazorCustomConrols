<style>
    .timespan-edit {
    display: flex;
    align-items: center;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 4px;
    width: 200px;
    box-sizing: border-box;
    }

    .timespan-display {
    flex: 1;
    display: flex;
    justify-content: space-around;
    cursor: pointer;
    }

    .time-value {
    padding: 0 4px;
    cursor: pointer;
    user-select: none;
    }

    .time-value.selected {
    background-color: #ddd;
    border-radius: 2px;
    }

    .spinner {
    display: flex;
    flex-direction: column;
    justify-content: center;
    }

    .spinner button {
    border: none;
    background: none;
    cursor: pointer;
    padding: 0;
    font-size: 12px;
    line-height: 1;
    width: 20px;
    height: 20px;
    }

    .spinner button:disabled {
    cursor: not-allowed;
    opacity: 0.5;
    }

</style>
<div class="timespan-edit">
    <div class="timespan-display" @onclick="FocusNext">
        <span class="time-value @(SelectedField == "Hours" ? "selected" : "")" @onclick="@(() => SetSelectedField("Hours"))">@Hours</span>
        <span>hours</span>
        <span class="time-value @(SelectedField == "Minutes" ? "selected" : "")" @onclick="@(() => SetSelectedField("Minutes"))">@Minutes</span>
        <span>minutes</span>
    </div>
    <div class="spinner">
        <button class="up-arrow" @onclick="Increment" disabled="@IsReadOnly">▲</button>
        <button class="down-arrow" @onclick="Decrement" disabled="@IsReadOnly">▼</button>
    </div>
</div>

@code {
    [Parameter] public TimeSpan Value { get; set; }
    [Parameter] public EventCallback<TimeSpan> ValueChanged { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public TimeSpan MinValue { get; set; } = TimeSpan.Zero;
    [Parameter] public TimeSpan MaxValue { get; set; } = TimeSpan.MaxValue;

    private string SelectedField { get; set; } = string.Empty;

    private int Hours => Value.Hours + (Value.Days * 24);
    private int Minutes => Value.Minutes;

    private void SetSelectedField(string field) => SelectedField = field;

    private async Task UpdateValue(TimeSpan newValue)
    {
        if (newValue >= MinValue && newValue <= MaxValue)
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(newValue);
        }
    }

    private async Task Increment()
    {
        if (SelectedField == "Hours")
        {
            await UpdateValue(Value.Add(TimeSpan.FromHours(1)));
        }
        else if (SelectedField == "Minutes")
        {
            await UpdateValue(Value.Add(TimeSpan.FromMinutes(1)));
        }else{
            await UpdateValue(Value.Add(TimeSpan.FromHours(1)));
        }
    }

    private async Task Decrement()
    {
        if (SelectedField == "Hours")
        {
            await UpdateValue(Value.Subtract(TimeSpan.FromHours(1)));
        }
        else if (SelectedField == "Minutes")
        {
            await UpdateValue(Value.Subtract(TimeSpan.FromMinutes(1)));
        }else{
            await UpdateValue(Value.Subtract(TimeSpan.FromHours(1)));
        }
    }

    private void FocusNext()
    {
        // Toggle between Hours and Minutes
        SelectedField = SelectedField == "Hours" ? "Minutes" : "Hours";
    }
}
